"""Дополнительные:"""
# 1.	Напишите программу, которая принимает на вход цифру, обозначающую день
# недели, и проверяет, является ли этот день выходным.
# Пример:
# - 6 -> да
# - 7 -> да
# - 1 -> нет

a = int(input('Введите цифру, обозначающую день недели:'))
if a == 6 or a == 7:
    input("-> да")
if 0 < a < 6:
    input("-> нет")
else:
    input("нет такого дня недели")

# 2.	Напишите программу для. проверки истинности утверждения
# ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.

for X in [True, False]:
    for Y in [True, False]:
        for Z in [True, False]:
            print(not (X or Y or Z), '=', not X and not Y and not Z)

# 3.	Напишите программу, которая принимает на вход координаты точки (X и Y),
# причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится
# эта точка (или на какой оси она находится).
# Пример:
# - x=34; y=-30 -> 4
# - x=2; y=4-> 1
# - x=-34; y=-30 -> 3

x = int(input('Ведите координату точки X(не равную 0):'))
y = int(input('Ведите координату точки Y(не равную 0):'))
if x > 0 and y > 0:
    print('-> 1')
if x < 0 and y > 0:
    print('-> 2')
if x < 0 and y < 0:
    print('-> 3')
if x > 0 and y < 0:
    print('-> 4')

# 4.	Напишите программу, которая по заданному номеру четверти, показывает
# диапазон возможных координат точек в этой четверти (x и y).

a = int(input('Ведите номер четверти:'))
if a == 1:
    print('x > 0 and y > 0')
if a == 2:
    print('x < 0 and y > 0')
if a == 3:
    print('x < 0 and y < 0')
if a == 4:
    print('x > 0 and y < 0')

# 5.	Напишите программу, которая принимает на вход координаты двух точек
# и находит расстояние между ними в 2D пространстве.
# Пример:
# - A (3,6); B (2,1) -> 5,09
# - A (7,-5); B (1,-1) -> 7,21

import math
xA = int(input('Ведите первую координату точки A:'))
yA = int(input('Ведите вторую координату точки A:'))
xB = int(input('Ведите первую координату точки B:'))
yB = int(input('Ведите вторую координату точки B:'))
d = round(math.sqrt((xB - xA) ** 2 + (yB - yA) ** 2), 2)
input(f'A ({xA},{yA}); B ({xB},{yB}) -> {d}')
